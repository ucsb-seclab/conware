#!/usr/bin/env python
import sys
import argparse
import csv

# emulated log: Operation Seqn	Address	Value	Value (Model)	PC	Size	Timestamp	Model /////////This is a tsv file
# recorded log: Operation	Seqn	Address	Value	Value (Model)	PC	Size	Timestamp	Model ///////// this is listed as a csv file but it is a tsv file

recorded_reads = []
recorded_reads_referecne = {}
recorded_writes = []
recorded_writes_reference = {}
emulated_reads = []
emulated_writes = []
count = 0


def main(emulated, recorded):
    emulated_log = file(emulated, 'r')
    recorded_log = file(recorded, 'r')

    emulated_csv = csv.reader(emulated_log, dialect=csv.excel_tab)
    recorded_csv = csv.reader(recorded_log, dialect=csv.excel_tab)

    for row in recorded_csv:
        if (row[0] == 'READ'):
            recorded_reads.append([row[2], row[3], row[6]])
        elif (row[0] == 'WRITE'):
            recorded_writes.append([row[2], row[3], row[6]])
    for row in emulated_csv:
        if (row[0] == 'READ'):
            emulated_reads.append([row[2], row[3], row[6]])
        elif (row[0] == 'WRITE'):
            emulated_writes.append([row[2], row[3], row[6]])
    emulated_log.seek(0)
    recorded_log.seek(0)

    for write in recorded_writes:
        if write not in emulated_writes:
            print("Write: " + str(write) + " not in emulated log")
            #for check_write_row in recorded_csv:
                #if check_write_row[0] == 'WRITE' and check_write_row[2] == \
                 #       write[0] and check_write_row[3] == write[1] and \
                 #       check_write_row[6] == write[2]:
                    #print("Missing Write Data: " + str(check_write_row))

    emulated_log.seek(0)
    recorded_log.seek(0)
    for read in recorded_reads:
        if read not in emulated_reads:
            print("Read: " + str(read) + " not in emulated log")
            #for check_read_row in recorded_csv:
                #if check_read_row[0] == 'READ' and check_read_row[2] == read[
                 #   0] and check_read_row[3] == read[1] and check_read_row[6] == \
                #        read[2]:
                    #print("Missing Read Data: " + str(check_read_row))


if __name__ == "__main__":
    parser = argparse.ArgumentParser()

    parser.add_argument('emulated_log')
    parser.add_argument('recorded_log')

    args = parser.parse_args()
    main(args.emulated_log, args.recorded_log)
