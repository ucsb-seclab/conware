#!/usr/bin/env python
# Native
import argparse
import importlib
import os
import pprint

from avatar2 import *
import logging

from pretender.common import build_avatar, build_qemu_emulator, set_memory_map, \
    load_config, build_hardware
from pretender.logger import LogWriter
from pretender.model import PretenderModel
from pretender.bin_parser import M3Parser
import pretender.globals as G

logger = logging.getLogger(__name__)

pretender_model = None
output_tsv = None


def print_read_before(avatar, message, **kwargs):
    """
    prints our read message
    see avatar.ui.message.py
    """
    print "READ BEFORE:  %s (%s)" % (message, hex(message.address))
    # mem_log.write_row(
    #     ['READ', message.id, message.address, val, message.pc, message.size])
    pprint.pprint(kwargs)


def print_write_before(avatar, message, **kwargs):
    """
    prints our write message
    see avatar.ui.message.py
    """
    print "WRITE BEFORE: %s (%s,%s)" % (message, hex(message.address),
                                        message.value)

    # mem_log.write_row(
    #     ['WRITE', message.id, message.address, val, message.pc, message.size])
    # pprint.pprint(kwargs)


def print_read_after(avatar, message, **kwargs):
    """
    prints our read message
    see avatar.ui.message.py
    """
    _, val, success = kwargs['watched_return']

    # print "REAL: %s, %s" % (hex(message.address), val)

    # IMPORTANT: This must be done before the actual read, because the read
    # can influence the model!
    model_name = pretender_model.get_model(message.address)

    # Read the value
    model_val = pretender_model.read_memory(message.address, message.size)

    logger.info("READ:  %s (%s, %s : %s) from %s" % (message,
                                                     hex(message.address),
                                                     val, model_val,
                                                     model_name))

    # print "MODEL: %s, %s" % (hex(message.address), model_val)
    output_tsv.write_row(
        ['READ', hex(message.address), message.size, val, model_val,
         hex(message.pc), model_name])
    # mem_log.write_row(
    #     ['READ', message.id, message.address, val, message.pc, message.size])
    # pprint.pprint(kwargs)


def print_write_after(avatar, message, **kwargs):
    """
    prints our write message
    see avatar.ui.message.py
    """
    _, val, success = kwargs['watched_return']
    logger.info("WRITE: %s (%s,%s)" % (message, hex(message.address),
                                       message.value))

    # IMPORTANT: This must be done before the actual read, because the read
    # can influence the model!
    model_name = pretender_model.get_model(message.address)

    # Read the value

    # Write to our model
    pretender_model.write_memory(message.address, message.size, message.value)

    output_tsv.write_row(
        ['WRITE', hex(message.address), message.size, message.value,
         message.value, hex(message.pc), model_name])

    if message.address == 0x40020018:
        print "LED ON", hex(message.value), time.time()
    elif message.address == 0x40020028:
        print "LED OFF", time.time()
        # mem_log.write_row(
        #     ['WRITE', message.id, message.address, val, message.pc, message.size])
        # pprint.pprint(kwargs)


if __name__ == "__main__":
    # Default argument values
    sample = "firmware/Nucleo_blink_led.bin"
    openocd_conf = '/usr/share/openocd/scripts/board/st_nucleo_l1.cfg'
    output_dir = '/tmp/myavatar'
    qemu_executable = os.path.join(os.path.dirname(__file__),
                                   "../../avatar2-pretender/targets/build/qemu/arm-softmmu/qemu-system-arm")
    gdb_port = 1235
    qemu_port = 23454

    # Get user input
    parser = argparse.ArgumentParser()
    parser.add_argument("--board-config", help="Board config file YAML")
    parser.add_argument('--stimulator', '-S',
                        help="Program to run to stimulate the target")
    parser.add_argument("--sample", "-s", default=sample,
                        help="Binary being analyzed.")
    parser.add_argument("--openocd_conf", "-c", default=openocd_conf,
                        help="OpenOCD config file.")
    parser.add_argument("--output_dir", "-o", default=output_dir,
                        help="Output directory for logging.")
    parser.add_argument("--gdb_port", "-g", default=gdb_port,
                        help="GDB port number.")
    parser.add_argument("--qemu_executable", "-x", default=qemu_executable,
                        help="QEMU Executable.")
    parser.add_argument("--qemu_port", "-q", default=qemu_port,
                        help="QEMU Port.")
    parser.add_argument("--debug", "-d", default=False, action='store_true',
                        help="QEMU Port.")
    parser.add_argument("--recording_dir", "-r", default="recording",
                        help="Directory containing pickled model.")
    parser.add_argument("--output_file", "-O", default="comparison_output.tsv",
                        help="File to save comparison results to.")
    parser.add_argument("--sleep_time", "-t", default=120,
                        help="Time to sleep before killing Avatar. [default: "
                             "120 s]")
    parser.add_argument('--proto', help="Select Avatar protocol to use",
                        choices=('openocd', 'gdb', 'jlink'),
                        default='openocd')
    args = parser.parse_args()
    args.null_model = None
    args.ivt_address = None
    args.ivt_unlock = None

    # Setup Logging
    logging.basicConfig()
    if args.debug:
        logger.setLevel(logging.DEBUG)
    else:
        logger.setLevel(logging.INFO)

    # Do all of our checks!
    if not os.path.exists(args.sample):
        l.error("Sample file (%s) does not exist." % args.sample)
        parser.print_help()
        sys.exit()

    if not os.path.exists(args.qemu_executable):
        l.error("QEMU executable (%s) does not exist." % args.qemu_executable)
        parser.print_help()
        sys.exit()

    if not os.path.exists(args.recording_dir):
        l.error("Recording directory does not exist (%s)." %
                args.recording_dir)
        parser.print_help()
        sys.exit()

    model_file = os.path.join(args.recording_dir, G.MODEL_FILE)
    if not os.path.exists(model_file):
        l.error("No model file found (%s).  Make sure you "
                "trained a model!" % model_file)
        parser.print_help()
        sys.exit()

    # Setup our models
    pretender_model = PretenderModel(filename=model_file)

    peripherals = pretender_model.get_peripherals()
    for peripheral in peripherals:
        for state in peripheral.list_states():
            print state
            peripheral.state_collapse(state)

    # Load our args
    args = load_config(args)

    # Setup our binary parser
    bin_parser = M3Parser(args.sample)

    output_file = model_file = os.path.join(args.recording_dir,
                                            args.output_file)
    output_tsv = LogWriter(output_file)

    # Let's setup avatar
    avatar = build_avatar(args)
    qemu = build_qemu_emulator(avatar, args)
    hardware = build_hardware(avatar, args)
    set_memory_map(avatar, args, model=False)

    #
    # # Let's setup avatar
    # l.warning("Creating Avatar")
    # avatar = Avatar(output_directory=args.output_dir, arch=ARM_CORTEX_M3)
    #
    # nucleo = avatar.add_target(OpenOCDTarget, name='nucleo',
    #                            gdb_executable="arm-none-eabi-gdb",
    #                            openocd_script=args.openocd_conf)
    #
    # qemu = avatar.add_target(QemuTarget, name='qemu',
    #                          gdb_executable="arm-none-eabi-gdb",
    #                          firmware=sample,
    #                          executable=args.qemu_executable)
    #
    # qemu.gdb_port = args.qemu_port
    #
    # # Setup our memory regions
    # l.warn("Adding memory ranges")
    # ivt = avatar.add_memory_range(0, 0x1000)
    # mmio = avatar.add_memory_range(0x40000000, 0x10000000, name='mmio',
    #                                forwarded=True, forwarded_to=nucleo)
    # # mmio = avatar.add_memory_range(0x40000000, 0x10000000, name='mmio',
    # #                                forwarded=True, forwarded_to=nucleo)
    # rom = avatar.add_memory_range(0x08000000, 0x80000, name='rom',
    #                               file=args.sample)
    # ram = avatar.add_memory_range(0x20000000, 0x00019000, name='ram')

    # Monitor memory reads to forwarded MMIO
    # l.warning("Adding watchmen")
    avatar.watchmen.add_watchman('RemoteMemoryWrite', 'after',
                                 print_write_after)
    avatar.watchmen.add_watchman('RemoteMemoryRead', 'after',
                                 print_read_after)
    # avatar.watchmen.add_watchman('RemoteMemoryWrite', 'before',
    #                              print_write_before)
    # avatar.watchmen.add_watchman('RemoteMemoryRead', 'before',
    #                              print_read_before)

    # Do we have a stimulator?
    stim_proc = None
    if args.stimulator:
        # Load the stimulator out of the library
        Stimulator = getattr(
            importlib.import_module("pretender.stimulators"),
            args.stimulator)
        stim_proc = Stimulator()
        stim_proc.start()
        stim_proc.wait_for_connection()

    # Init our targets
    logger.warn("Init targets")
    avatar.init_targets()

    # Set our program counter
    qemu.regs.pc = bin_parser.get_entry_point()
    qemu.cont()

    logger.info("Running for a bit...")
    time.sleep(args.sleep_time)

    # import IPython
    #
    # IPython.embed()

    qemu.stop()
    print("Shutting down...")
    avatar.shutdown()

"""
Notes:
Manipulate LED
on: nucleo.write_memory(0x40020018, 2, 32)
off: nucleo.write_memory(0x40020028, 2, 32)
"""
