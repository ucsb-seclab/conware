#!/usr/bin/env python
# Native
import argparse
import os
import pprint

import yaml
from avatar2 import *

import logging

from conware.peripherals import Pretender

from pretender.logger import LogWriter
from pretender.bin_parser import M3Parser
from pretender.coverage import get_hit_blocks

from conware.pretender_model import PretenderModel
from conware import *

logger = logging.getLogger(__name__)
seq = 0
time_start = 0;

def parse_args():
    # Default argument values
    sample = "firmware/custom/blink/build/blink.ino.bin"
    qemu_executable = os.path.join(os.path.dirname(__file__),
                                   "../../avatar2-pretender/targets/build/qemu/arm-softmmu/qemu-system-arm")
    board_config = os.path.join(os.path.dirname(__file__),
                                "../configs/due.yaml")
    gdb_port = 1235
    qemu_port = 23454

    # Get user input
    parser = argparse.ArgumentParser()
    parser.add_argument("--board-config", default=board_config,
                        help="Board config file YAML")
    parser.add_argument('--coverage', '-C', action='store_true',
                        help="Calculate block coverage from QEMU data")
    parser.add_argument("--model", "-m", default=None,
                        help="Model file to load (will default to "
                             "model.pickle in the recording directory).")
    parser.add_argument("--sample", "-s", default=sample,
                        help="Binary being analyzed.")
    parser.add_argument("--gdb_port", "-g", default=gdb_port,
                        help="GDB port number.")
    parser.add_argument("--qemu_executable", "-x", default=qemu_executable,
                        help="QEMU Executable.")
    parser.add_argument("--qemu_port", "-q", default=qemu_port,
                        help="QEMU Port.")
    parser.add_argument("--debug", "-d", default=False, action='store_true',
                        help="Enable DEBUG output")
    parser.add_argument('--shell', help="Enable IPython shell",
                        action='store_true')
    parser.add_argument('--vomit', "-V", action='store_true',
                        help="Enable the vomit log from QEMU")
    parser.add_argument("--recording_dir", "-r", default="recording",
                        help="Directory containing pickled model.")
    parser.add_argument("--output_file", "-O", default="emulated_output.csv",
                        help="File to save recorded MMIO to.")
    parser.add_argument("--sleep_time", "-t", default=120,
                        help="Time to sleep before killing Avatar. [default: "
                             "120 s]")

    parser.add_argument("--system_clock_scale", type=int, default=25,
                        help="Set the system clock scale")
    args = parser.parse_args()

    # Setup Logging
    if args.debug:
        logging.basicConfig(level=logging.DEBUG)
    else:
        logging.basicConfig(level=logging.INFO)

    args.output_dir = args.recording_dir
    args.memory_map = None
    args.partial_model = None

    # Do all of our checks!
    if not os.path.exists(args.sample):
        logger.error("Sample file (%s) does not exist." % args.sample)
        parser.print_usage()
        sys.exit()
    else:
        logger.info("Loading %s..." % args.sample)

    if not os.path.exists(args.qemu_executable):
        logger.error("QEMU executable (%s) does not exist." %
                   args.qemu_executable)
        parser.print_usage()
        sys.exit()
    else:
        logger.info("Using %s for QEMU..." % args.qemu_executable)

    if not os.path.exists(args.recording_dir):
        logger.error("Recording directory does not exist (%s)." %
              args.recording_dir)
        parser.print_help()
        sys.exit()
    else:
        logger.info("Using %s as the project directory..." % args.recording_dir)

    return args


def emulate_read_after(avatar, message, **kwargs):
    """
    prints our read message
    see avatar.ui.message.py
    """
    global seq
    _, val, success = kwargs['watched_return']

    model_val = 0

    try:
        model_name = message.dst.forwarded_to.model.get_model(message.address)
    except:
        try:
            model_name = message.dst.forwarded_to.model.get_model(
                message.address)
        except:
            model_name = "ERR"

    if not message.dst or 'model' in message.dst.name:
        logger.debug(
            "IGNR:  %s (%s, %s) @ %s" % (message, hex(message.address), val,
                                         hex(message.pc)))
    else:
        logger.debug(
            "READ:  %s (%s, %s, %s) @ %s" % (message, hex(message.address),
                                             val, model_val, hex(message.pc)))
        # logger.info("MODEL: %s, %s" % (hex(message.address), model_val))
        OUTPUT_TSV.write_row(
            ['READ', seq,
             "%08x" % message.address,
             "%08x" % val,
             "%08x" % model_val,
             "0x%x" % message.pc,
             message.size, time.time() - time_start, model_name])

    if message.address == 0x400e081c:
        logger.info("<<< %s" % hex(message.value))

    seq += 1

    # mem_log.write_row(
    #     ['READ', message.id, message.address, val, message.pc, message.size])
    # pprint.pprint(kwargs)


def emulate_write_after(avatar, message, **kwargs):
    """
    prints our write message
    see avatar.ui.message.py
    """
    global seq

    _, val, success = kwargs['watched_return']

    val = message.value
    model_val = 0

    try:
        model_name = message.dst.forwarded_to.model.get_model(message.address)
    except:
        try:
            model_name = message.dst.forwarded_to.model.get_model(
                message.address)
        except:
            model_name = "ERR"

    if not message.dst or "model" in message.dst.name:
        logger.debug("IGNW %s (%s,%s) @ %s" % (message, hex(message.address),
                                               message.value, hex(message.pc)))
    else:
        logger.debug("WRITE %s (%s,%s,%s) @ %s " % (message,
                                                    hex(message.address),
                                                    message.value,
                                                    model_val, hex(message.pc)))

        OUTPUT_TSV.write_row(
            ['WRITE', seq,
             "%08x" % message.address,
             "%08x" % val,
             "%08x" % model_val,
             "0x%x" % message.pc,
             message.size, time.time() - time_start, model_name])

    if message.address == 0x400e081c:
        dest = [0] * 4
        l = message.value
        dest[0] = chr(l & 0xFF)
        dest[1] = chr((l >> 8) & 0xFF)
        dest[2] = chr((l >> 16) & 0xFF)
        dest[3] = chr((l >> 24) & 0xFF)
        value_str = "".join(dest)

        logger.info(">> %s (%s)" % (repr(value_str), hex(message.value)))
    if message.address == 0x40020018:
        print "LED ON", hex(message.value), time.time()
    elif message.address == 0x40020028:
        print "LED OFF", time.time()

    seq += 1
    # mem_log.write_row(
    #     ['WRITE', message.id, message.address, val, message.pc, message.size])
    # pprint.pprint(kwargs)


def set_emulate_hooks(avatar, args):
    # Monitor memory reads to forwarded MMIO
    # l.warning("Adding watchmen")
    avatar.watchmen.add_watchman('RemoteMemoryWrite', 'after',
                                 emulate_write_after)
    avatar.watchmen.add_watchman('RemoteMemoryRead', 'after',
                                 emulate_read_after)
    # avatar.watchmen.add_watchman('RemoteMemoryWrite', 'before',
    #                              print_write_before)
    # avatar.watchmen.add_watchman('RemoteMemoryRead', 'before',
    #                              print_read_before)
    if args.interrupts:
        # qemu.protocols.interrupts.enable_interrupts()
        avatar.enable_interrupts(None, qemu, semi_forwarding=True)
        logger.info("Registering interrupt handlers")
        avatar.watchmen.add_watchman('RemoteInterruptEnter', 'after',
                                     emulate_interrupt_enter)
        avatar.watchmen.add_watchman('RemoteInterruptExit', 'after',
                                     emulate_interrupt_exit)
        # avatar.enable_interrupts(nucleo, qemu)


if __name__ == '__main__':
    args = parse_args()

    config = None
    if args.board_config:
        logger.info("Using board configuration from %s " % args.board_config)
        with open(args.board_config) as f:
            config = yaml.load(f)
    # Load our model
    if args.model is None:
        model_file = os.path.join(args.output_dir, MODEL_FILE)
    else:
        model_file = args.model
    if not os.path.exists(model_file):
        logger.error("Could not find model file (%s)." % model_file)
        sys.exit()
    else:
        logger.info("Loading model file (%s)..." % model_file)
    pretender_model = PretenderModel(filename=model_file)
    # Let's setup avatar
    logger.info("Creating Avatar instance...")
    avatar_dir = os.path.join(args.output_dir, "emulate_logs")
    avatar = Avatar(output_directory=avatar_dir, arch=ARM_CORTEX_M3)

    # Setup emulator
    qemu_args = []
    COVERAGE_LOG = None
    avatar_dir = avatar.output_directory
    COVERAGE_LOG = os.path.join(avatar_dir, 'qemu_trace_log.txt')
    if "vomit" in args and args.vomit:
        qemu_args += ['-d', 'all,trace:nvic*,avatar', '-D', COVERAGE_LOG]
    elif "coverage" in args and args.coverage:
        qemu_args += ['-d', 'exec', '-D', COVERAGE_LOG]
    # qemu_args += ["-M","lm3s811evb"]
    qemu = avatar.add_target(QemuTarget, name='qemu',
                             gdb_executable="arm-none-eabi-gdb",
                             firmware=args.sample,
                             executable=args.qemu_executable,
                             additional_args=qemu_args,
                             system_clock_scale=args.system_clock_scale)
    qemu.gdb_port = args.qemu_port

    # Define our memory map for this board
    logger.info("Configuring memory layout...")
    for region, params in config['memory_map'].items():
        base = params['base']
        size = params['size']
        forwarded = params['forwarded']
        logger.info("   %s: %s" % (region, repr(params)))
        if region == 'mmio':
            logger.info("Model added to 0x%08x (size: %x)" % (base,
                                                              size))

            mmio = avatar.add_memory_range(base, size, name='mmio',
                                           forwarded=True,
                                           forwarded_to=Pretender(
                                               "Pretender", base,
                                               size,
                                               pretender_model))

        # If this is the ROM, we need to put the actual firmware in!
        elif region == 'rom':
            avatar.add_memory_range(base, size, name=region,
                                    forwarded=forwarded,
                                    forwarded_to=None, file=args.sample)
        else:
            avatar.add_memory_range(base, size, name=region,
                                    forwarded=forwarded,
                                    forwarded_to=None)
    # Init our targets
    logger.warn("Init targets")
    avatar.init_targets()

    # Set our output file
    OUTPUT_TSV = LogWriter(os.path.join(args.recording_dir, args.output_file))
    # Set our hooks
    avatar.watchmen.add_watchman('RemoteMemoryWrite', 'after',
                                 emulate_write_after)
    avatar.watchmen.add_watchman('RemoteMemoryRead', 'after',
                                 emulate_read_after)

    # Set our PC and SP
    # Setup our binary parser
    # TODO: Abstract this.
    bin_parser = M3Parser(args.sample)

    qemu.regs.pc = bin_parser.get_entry_point()
    qemu.regs.sp = bin_parser.get_initial_sp()

    # Update our IVT?
    if 'ivt_address' in args.__dict__ and args.ivt_address:
        logger.warning("Setting QEMU vector table base to %#08x" %
                    args.ivt_address)
        qemu.protocols.interrupts.set_vector_table_base(args.ivt_address)

    time_start  = time.time()

    # Dropping to a shell?
    if args.shell:
        import IPython;

        IPython.embed()
    else:

        qemu.cont()

        logger.info("Running for a %f seconds..." % float(args.sleep_time))
        time.sleep(float(args.sleep_time))
        print("Time's up! Stopping everything")

    qemu.stop()
    print("Shutting down Avatar...")
    avatar.shutdown()
    if args.coverage:
        blocks = get_hit_blocks(COVERAGE_LOG)
        print "Hit blocks:", repr(blocks)
        print "Hit %d blocks" % len(blocks)
