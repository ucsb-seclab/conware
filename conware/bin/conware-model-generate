#!/usr/bin/env python

# Native
import argparse
import fnmatch
import os
import pickle
import sys
import logging

# Conware
from conware.model import ConwareModel
from conware import *

logger = logging.getLogger(__name__)

if __name__ == "__main__":
    # Get user input
    parser = argparse.ArgumentParser()
    parser.add_argument("recording_dir", default="recording",
                        help="Directory containing all of the log files")
    parser.add_argument("--debug", "-d", default=False, action='store_true',
                        help="Enable debug output.")
    args = parser.parse_args()

    if not os.path.exists(args.recording_dir):
        parser.print_help()
        sys.exit(0)

    # Setup Logging
    if args.debug:
        logging.basicConfig(level=logging.DEBUG)
    else:
        logging.basicConfig(level=logging.INFO)

    # First, let's just read our log into a nice internal structure
    files = fnmatch.filter(os.listdir(args.recording_dir),
                           "*.%s" % RECORDING_EXTENSION)

    if len(files) != 1:
        logger.error("It looks like there is less than or more than 1 "
                     "recording "
                     "in the given directory!")
        parser.print_help()
        sys.exit(0)

    # Do we already know how certain interrupts work?
    interrupt_file = os.path.join(args.recording_dir, INTERRUPT_MAP)
    interrupt_map = {}
    # if os.path.exists(interrupt_file):
    #     logger.info("Found interrupt map file, loading..")
    #     with open(interrupt_file, "r") as f:
    #         interrupt_map = pickle.load(f)
    # interrupt_map = {
    #     24: (1074661384, 2),
    #     (1074661384, 2): 24
    # }

    for f in files:
        logger.info("Opening %s..." % f)
        p = ConwareModel(interrupt_map=interrupt_map)
        p.train(os.path.join(args.recording_dir, f))
        output_model = os.path.join(args.recording_dir, MODEL_FILE)
        print "Saving model (%s)..." % output_model
        p.save(output_model)
