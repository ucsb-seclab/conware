#!/usr/bin/env python

# Native
import argparse
import fnmatch
import os

import sys

sys.path.append("/home/graham/Desktop/conware/conware/")

import logging
from conware.model import PretenderModel
from conware import *
import pickle

logger = logging.getLogger(__name__)


def merge_partial_model(model, partial_model_fn):
    """
    This merges a partial model with a newly-created model.
    When we use iterative modeling, we will not observe the partially modeled pieces.
    Therefore, we need to smash them together a little differently than a multi-run single model
    We here find the "good models" (as before, where we had full interrupt recordings) and then
    insert this peripheral into our new model.
    :param model:
    :param partial_model:
    :return:
    """
    with open(partial_model_fn, 'rb') as f:
        pm = pickle.load(f)
        # Patch in the addresses from the partial model
        for addr, m in pm.items():
            mdl = m['model']
            if mdl.irq_num and mdl.interrupt_timings and mdl.interrupt_trigger:
                logger.info("Using partial model for address %#08x %s" % (
                    addr, repr(mdl)))
                if not addr in model.model_per_address:
                    model.model_per_address[addr] = {}
                model.model_per_address[addr]['model'] = mdl
    return model


if __name__ == "__main__":
    # Default argument values
    sample = "bins/Nucleo_blink_led.bin"
    openocd_conf = '/usr/share/openocd/scripts/board/st_nucleo_l1.cfg'
    output_dir = '/tmp/myavatar'
    qemu_executable = "../../avatar-pretender/targets/build/qemu/arm-softmmu/qemu-system-arm"
    gdb_port = 1235
    qemu_port = 23454

    # Get user input
    parser = argparse.ArgumentParser()
    parser.add_argument("--recording_dir", "-r", default="recording",
                        help="Directory containing all of the log files")
    parser.add_argument("--partial-model", "-P",
                        help="Use a partial model to start with")
    parser.add_argument("--debug", "-d", default=False, action='store_true',
                        help="Enable debug output.")
    args = parser.parse_args()

    if not os.path.exists(args.recording_dir):
        parser.print_help()
        sys.exit(0)
    # Setup Logging
    if args.debug:
        logging.basicConfig(level=logging.DEBUG)
    else:
        logging.basicConfig(level=logging.INFO)

    # First, let's just read our log into a nice internal structure
    files = fnmatch.filter(os.listdir(args.recording_dir),
                           "*.%s" % RECORDING_EXTENSION)
    models = []
    for f in files:
        p = PretenderModel()
        p.train(os.path.join(args.recording_dir, f))
        models.append(p)

    combined_model = PretenderModel()
    if len(models) > 1:
        for i in range(0, len(models)):
            print "\n\n\n** Merging %d..." % (i)
            combined_model = combined_model.merge(models[i])
    else:
        combined_model = models[0]
    # Merge models
    if args.partial_model:
        # Merge a partial model
        models[-1] = merge_partial_model(models[-1], args.partial_model)
    print "Saving models..."
    combined_model.save(os.path.join(args.recording_dir, MODEL_FILE))
